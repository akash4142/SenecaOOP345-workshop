/*
*****************************************************************************
						  Workshop - #9 (Part-2)
Full Name  : Akash yadav
Student ID#: 172566218
Email      : ayadav35@myseneca.ca
Date       : 02/08/2023

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/
In this workshop, I had the opportunity to work on a project that involved backing up an encrypted text file of characters to a binary file, restoring the encrypted data from the binary file, and implementing multi-threading to the solution. Through this project, I was able to achieve several learning outcomes.

Learning Outcomes:

Processing Partitioned Data on Two or More Threads:
Implementing multi-threading in this project allowed me to process the data in parallel, improving the overall performance of the application. By partitioning the data and assigning it to multiple threads, I could utilize the available resources efficiently and reduce the processing time significantly. This experience has deepened my understanding of multi-threaded programming and how it can be leveraged to enhance the performance of computationally intensive tasks.

Writing and Reading Characters to/from a File in Binary Mode:
Throughout this workshop, I learned the techniques to write and read characters to and from a file in binary mode. This was essential for backing up and restoring the encrypted data. I became more familiar with file handling in C++ and gained insights into how binary files differ from text files and when to use each mode appropriately.

Binding a Function to Its Arguments:
The project introduced me to the concept of function binding using the std::bind function from the <functional> library. I applied this concept to bind the converter function with some of its arguments when creating thread objects for the multi-threaded encryption process. This technique enabled me to pass specific arguments to the function during thread creation, enhancing the flexibility and modularity of the code.

Reflection on the Workshop Experience:
Overall, this workshop was a valuable learning experience that combined multiple aspects of C++ programming, including file handling, multi-threading, and function binding. Working on this project helped me grasp the significance of parallelism in improving the performance of computational tasks. Moreover, it exposed me to the challenges and considerations associated with multi-threading, such as data partitioning and synchronization.

Workshop 9 was an enriching experience that deepened my understanding of multi-threading and file handling in C++. The project's real-world application and the opportunity to reflect on the learning outcomes provided valuable insights into how to write efficient and robust code. I look forward to applying the knowledge gained from this workshop in future projects and continuing to explore the world of multi-threadedÂ programming.