/*
*****************************************************************************
						  Workshop - #7 (Part-2)
Full Name  : Akash yadav
Student ID#: 172566218
Email      : ayadav35@myseneca.ca
Date       : 19/07/2023

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

ans 1:
std::ifstream and std::getline: Used to read data from a file. We use std::ifstream to open the file and std::getline to read lines from the file, splitting the data into individual components.

std::string::substr: Used to extract substrings from each line of data. It helps parse the data and assign it to appropriate variables.

std::stoi: Used to convert strings to integers when extracting numeric values from the data.

std::for_each: Used to iterate over the collection of crimes and display their details. It simplifies the process of displaying the data while keeping track of total cases and resolved cases.

std::sort: Used to sort the collection of crimes based on different fields such as province, crime type, number of cases, and resolved cases. We use lambda functions to define the comparison criteria for sorting.

std::transform: Used to modify the collection of crimes by cleaning the list and removing "[None]" from the crime names.

std::any_of: Used to check if a specific crime exists in the collection based on the provided crime name.

std::copy_if and std::back_inserter: Used to create a new list of crimes filtered by province name.

ans 2:
Advantages of Using STL Algorithms:

Readability and Maintainability: STL algorithms use expressive function names and clear syntax, making the code more readable and easier to maintain. This results in reduced chances of bugs or logical errors.

Reusability: STL algorithms are generic and can be used with various data structures. This allows us to reuse the same algorithms for different collections without rewriting code.

Performance and Optimization: STL algorithms are heavily optimized and tested, resulting in efficient performance. The STL implementations are generally well-tuned and can outperform manually implemented loops.

Consistency: Using STL algorithms promotes consistency in the codebase, as developers follow a standard set of functions for common operations like sorting, searching, and transforming.

Less Error-Prone: STL algorithms are rigorously tested, reducing the likelihood of errors. They are also less prone to off-by-one errors or other issues common with manual loops.

ans 3:
To prevent the client from specifying an invalid field for sorting the collection of crimes, we can use an enumeration (enum) to represent the possible fields. By doing this, we restrict the field choices to a predefined set of valid options. Here's how we can redesign the sorting function:

First, define an enumeration representing the valid fields for sorting:
cpp
Copy code
enum class SortField {
    Province,
    Crime,
    Cases,
    Resolved
};
Modify the sorting function to take the SortField as a parameter instead of a string:
cpp
Copy code
void sdds::CrimeStatistics::sort(SortField field) {
    switch (field) {
        case SortField::Province:
            std::sort(m_crimes.begin(), m_crimes.end(), [](const Crime& a, const Crime& b) {
                return a.province < b.province;
            });
            break;
        case SortField::Crime:
            std::sort(m_crimes.begin(), m_crimes.end(), [](const Crime& a, const Crime& b) {
                return a.crime < b.crime;
            });
            break;
        case SortField::Cases:
            std::sort(m_crimes.begin(), m_crimes.end(), [](const Crime& a, const Crime& b) {
                return a.numberOfCases < b.numberOfCases;
            });
            break;
        case SortField::Resolved:
            std::sort(m_crimes.begin(), m_crimes.end(), [](const Crime& a, const Crime& b) {
                return a.m_resolved < b.m_resolved;
            });
            break;
        default:
            // Invalid field, handle the error here (throw exception, display error, etc.).
            throw std::invalid_argument("Invalid field for sorting.");
    }
}